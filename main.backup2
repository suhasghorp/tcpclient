#include <sys/socket.h>
#include <netinet/in.h>
#include <sys/un.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <string>
#include <vector>
#include <iostream>
#include <cstring>
#include <cstdlib>
#include <errno.h>

using namespace std;

string buffer;
vector<string> ex;

int main ( int argc, char *argv[] ) {
  if (argc < 3) {
    cout << "Insufficient Arguments" << endl;
    exit(7);
  }

  struct addrinfo *pai = NULL, *cpai = NULL;

  int err = getaddrinfo(argv[1], argv[2], NULL, &pai);
  if (err != 0) {
    fprintf(stderr, "error in getaddrinfo: %s\n", gai_strerror(err));
    return -1;
  }
  for (cpai = pai; cpai != NULL; cpai = cpai->ai_next) {
  //for (; pai != NULL; pai = pai->ai_next) {
    if (cpai->ai_family == AF_INET) {
      struct sockaddr_in *psai = (struct sockaddr_in *) cpai->ai_addr;
      char ip[INET_ADDRSTRLEN];
      //if (inet_ntop(cpai->ai_family, &(psai->sin_addr), ip, INET_ADDRSTRLEN) != NULL) {
      if (cpai->ai_family, &(psai->sin_addr), ip, INET_ADDRSTRLEN != NULL) {
        printf("IP: %s\n", ip);
      }
    } else if (cpai->ai_family == AF_INET6) {
      struct sockaddr_in6 *psai = (struct sockaddr_in6 *) cpai->ai_addr;
      char ip[INET6_ADDRSTRLEN];
      if (inet_ntop(cpai->ai_family, &(psai->sin6_addr), ip, INET6_ADDRSTRLEN) != NULL) {
        printf("IP: %s\n", ip);
      }
    } else {
      printf("Don't know how to convert family %d addresses\n", pai->ai_family);
    }
  }
  freeaddrinfo(pai);
  printf("\nDone.\n\n");

}